% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotcor.R
\name{plotcor}
\alias{plotcor}
\title{Plot a correlation matrix}
\usage{
plotcor(
  x,
  mincor = 0,
  maxn = 4,
  maxcex = 1,
  legend = TRUE,
  colors = c("#2297E6", "#DF536B"),
  ...
)
}
\arguments{
\item{x}{Correlation matrix returned from \verb{\link{cor()}}}

\item{mincor}{Minimum (absolute) correlation to use for text labels.  Defaults to 0 (all will be plotted)}

\item{maxn}{Maximum number of nodes per parameter name for text labels, to prevent plot clutter.  Defaults to 4.}

\item{maxcex}{Maximum character expansion factor for text labels.  Defaults to 1.}

\item{legend}{Whether to produce a plot legend.  Defaults to \code{TRUE}.}

\item{colors}{A vector of two colors defining the color ramps to use for negative
and positive colors.  Defaults to blue (negative) and red (positive).}

\item{...}{Optional plotting arguments}
}
\value{
\code{NULL}
}
\description{
Plots a correlation matrix as shades of red (positive) or blue
(negative), or other colors as specified.

The plotting component of this function is taken directly from \code{jagshelper::plotcor_jags()}.

If row/column names are given with indices in square brackets
(e.g. \verb{"a[1]", "a[2]"}, etc.), a single axis
tick will be used for all elements with a single name preceding the \code{[} character.
This was originally implemented in the \code{jagshelper} package, as applied to a
correlation matrix calculated from a data.frame
of MCMC output, and is left here in case it is useful.  This has the effect of
giving greater visual weight to single parameters, and reducing plot clutter.

Values of correlation are overlayed, with
character size scaled according to the absolute correlation.
}
\examples{
## simulating a dataset
n <- 100
xx <- rnorm(n, mean=10, sd=1)
dfsim <- data.frame(a = xx + rnorm(n, sd=0.5),
                    b = xx + rnorm(n, sd=0.5),
                    c = xx + rnorm(n, sd=2),
                    d = xx + rnorm(n, sd=4),
                    e = -xx + rnorm(n, sd=2),
                    f = -xx + rnorm(n, sd=0.5),
                    g = -xx + rnorm(n, sd=0.5))

## printing the correlation matrix
cor(dfsim)

## plotting the correlation matrix
plotcor(cor(dfsim))

## using a different color ramp
plotcor(cor(dfsim), colors=c("cornflowerblue","orange"))


## heck we can plot the correlation matrix for our simulated ASL dataset
asldata <- sim_data$data
asldata$age <- as.numeric(as.factor(asldata$age))
plotcor(cor(asldata))  # data had NA values, leaving these in plot
plotcor(cor(asldata, use="na.or.complete"))  # data had NA values, removing these

}
\author{
Matt Tyers
}
